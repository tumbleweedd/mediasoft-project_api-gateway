// Code generated by MockGen. DO NOT EDIT.
// Source: customer_office_grpc.pb.go

// Package mock_customer is a generated GoMock package.
package mock_customer

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	customer "gitlab.com/mediasoft-internship/final-task/contracts/pkg/contracts/customer"
	grpc "google.golang.org/grpc"
)

// MockOfficeServiceClient is a mock of OfficeServiceClient interface.
type MockOfficeServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockOfficeServiceClientMockRecorder
}

// MockOfficeServiceClientMockRecorder is the mock recorder for MockOfficeServiceClient.
type MockOfficeServiceClientMockRecorder struct {
	mock *MockOfficeServiceClient
}

// NewMockOfficeServiceClient creates a new mock instance.
func NewMockOfficeServiceClient(ctrl *gomock.Controller) *MockOfficeServiceClient {
	mock := &MockOfficeServiceClient{ctrl: ctrl}
	mock.recorder = &MockOfficeServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOfficeServiceClient) EXPECT() *MockOfficeServiceClientMockRecorder {
	return m.recorder
}

// CreateOffice mocks base method.
func (m *MockOfficeServiceClient) CreateOffice(ctx context.Context, in *customer.CreateOfficeRequest, opts ...grpc.CallOption) (*customer.CreateOfficeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOffice", varargs...)
	ret0, _ := ret[0].(*customer.CreateOfficeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOffice indicates an expected call of CreateOffice.
func (mr *MockOfficeServiceClientMockRecorder) CreateOffice(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOffice", reflect.TypeOf((*MockOfficeServiceClient)(nil).CreateOffice), varargs...)
}

// GetOfficeList mocks base method.
func (m *MockOfficeServiceClient) GetOfficeList(ctx context.Context, in *customer.GetOfficeListRequest, opts ...grpc.CallOption) (*customer.GetOfficeListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOfficeList", varargs...)
	ret0, _ := ret[0].(*customer.GetOfficeListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfficeList indicates an expected call of GetOfficeList.
func (mr *MockOfficeServiceClientMockRecorder) GetOfficeList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfficeList", reflect.TypeOf((*MockOfficeServiceClient)(nil).GetOfficeList), varargs...)
}

// MockOfficeServiceServer is a mock of OfficeServiceServer interface.
type MockOfficeServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockOfficeServiceServerMockRecorder
}

// MockOfficeServiceServerMockRecorder is the mock recorder for MockOfficeServiceServer.
type MockOfficeServiceServerMockRecorder struct {
	mock *MockOfficeServiceServer
}

// NewMockOfficeServiceServer creates a new mock instance.
func NewMockOfficeServiceServer(ctrl *gomock.Controller) *MockOfficeServiceServer {
	mock := &MockOfficeServiceServer{ctrl: ctrl}
	mock.recorder = &MockOfficeServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOfficeServiceServer) EXPECT() *MockOfficeServiceServerMockRecorder {
	return m.recorder
}

// CreateOffice mocks base method.
func (m *MockOfficeServiceServer) CreateOffice(arg0 context.Context, arg1 *customer.CreateOfficeRequest) (*customer.CreateOfficeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOffice", arg0, arg1)
	ret0, _ := ret[0].(*customer.CreateOfficeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOffice indicates an expected call of CreateOffice.
func (mr *MockOfficeServiceServerMockRecorder) CreateOffice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOffice", reflect.TypeOf((*MockOfficeServiceServer)(nil).CreateOffice), arg0, arg1)
}

// GetOfficeList mocks base method.
func (m *MockOfficeServiceServer) GetOfficeList(arg0 context.Context, arg1 *customer.GetOfficeListRequest) (*customer.GetOfficeListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfficeList", arg0, arg1)
	ret0, _ := ret[0].(*customer.GetOfficeListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfficeList indicates an expected call of GetOfficeList.
func (mr *MockOfficeServiceServerMockRecorder) GetOfficeList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfficeList", reflect.TypeOf((*MockOfficeServiceServer)(nil).GetOfficeList), arg0, arg1)
}

// mustEmbedUnimplementedOfficeServiceServer mocks base method.
func (m *MockOfficeServiceServer) mustEmbedUnimplementedOfficeServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOfficeServiceServer")
}

// mustEmbedUnimplementedOfficeServiceServer indicates an expected call of mustEmbedUnimplementedOfficeServiceServer.
func (mr *MockOfficeServiceServerMockRecorder) mustEmbedUnimplementedOfficeServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOfficeServiceServer", reflect.TypeOf((*MockOfficeServiceServer)(nil).mustEmbedUnimplementedOfficeServiceServer))
}

// MockUnsafeOfficeServiceServer is a mock of UnsafeOfficeServiceServer interface.
type MockUnsafeOfficeServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeOfficeServiceServerMockRecorder
}

// MockUnsafeOfficeServiceServerMockRecorder is the mock recorder for MockUnsafeOfficeServiceServer.
type MockUnsafeOfficeServiceServerMockRecorder struct {
	mock *MockUnsafeOfficeServiceServer
}

// NewMockUnsafeOfficeServiceServer creates a new mock instance.
func NewMockUnsafeOfficeServiceServer(ctrl *gomock.Controller) *MockUnsafeOfficeServiceServer {
	mock := &MockUnsafeOfficeServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeOfficeServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeOfficeServiceServer) EXPECT() *MockUnsafeOfficeServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedOfficeServiceServer mocks base method.
func (m *MockUnsafeOfficeServiceServer) mustEmbedUnimplementedOfficeServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOfficeServiceServer")
}

// mustEmbedUnimplementedOfficeServiceServer indicates an expected call of mustEmbedUnimplementedOfficeServiceServer.
func (mr *MockUnsafeOfficeServiceServerMockRecorder) mustEmbedUnimplementedOfficeServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOfficeServiceServer", reflect.TypeOf((*MockUnsafeOfficeServiceServer)(nil).mustEmbedUnimplementedOfficeServiceServer))
}
